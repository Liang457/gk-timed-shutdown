# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from datetime import datetime
import os
from time import time
from PyQt5 import QtCore, QtGui, QtWidgets


def about():
    # 关于 这个我不需要多注释了
    QtWidgets.QMessageBox.about(MainWindow, '关于', '''定时关机 v1.1
许可证:MIT
作者:Cool-GK(Liang457)
项目地址:https://github.com/Liang457/gk-timed-shutdown''')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(315, 273)
        MainWindow.setMinimumSize(QtCore.QSize(315, 273))
        MainWindow.setMaximumSize(QtCore.QSize(315, 273))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(220, 30, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 20, 191, 102))
        self.groupBox.setObjectName("groupBox")
        self.label_time = QtWidgets.QLabel(self.groupBox)
        self.label_time.setGeometry(QtCore.QRect(30, 60, 121, 16))
        self.label_time.setObjectName("label_time")
        self.time = QtWidgets.QDateTimeEdit(self.groupBox)
        self.time.setGeometry(QtCore.QRect(20, 30, 141, 20))
        self.time.setWrapping(False)
        self.time.setDateTime(QtCore.QDateTime(
            QtCore.QDate(2022, 1, 1), QtCore.QTime(0, 0, 0)))
        self.time.setCalendarPopup(True)
        self.time.setObjectName("time")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(120, 140, 81, 101))
        self.groupBox_2.setObjectName("groupBox_2")
        self.GuanJi_AN = QtWidgets.QRadioButton(self.groupBox_2)
        self.GuanJi_AN.setGeometry(QtCore.QRect(20, 30, 47, 16))
        self.GuanJi_AN.setObjectName("GuanJi_AN")
        self.ChongQi_AN = QtWidgets.QRadioButton(self.groupBox_2)
        self.ChongQi_AN.setGeometry(QtCore.QRect(20, 60, 47, 16))
        self.ChongQi_AN.setObjectName("ChongQi_AN")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 140, 95, 103))
        self.groupBox_4.setObjectName("groupBox_4")
        self.QRZX = QtWidgets.QPushButton(self.groupBox_4)
        self.QRZX.setGeometry(QtCore.QRect(10, 30, 75, 23))
        self.QRZX.setObjectName("QRZX")
        self.QXDQ = QtWidgets.QPushButton(self.groupBox_4)
        self.QXDQ.setGeometry(QtCore.QRect(10, 60, 75, 23))
        self.QXDQ.setObjectName("QXDQ")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(about)
        self.QRZX.clicked.connect(self.ok)
        self.QXDQ.clicked.connect(self.cleam)
        self.time.dateTimeChanged.connect(self.time_calculation)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def time_calculation(self):
        time_set = self.time.text()
        # 从时间输入框中获取时间到 time_set 变量
        time_set = datetime.strptime(time_set, '%Y-%m-%d %H:%M:%S')
        # 将 time_set 格式化为 datetime
        now_time = datetime.now()
        # 获取当前时间
        time_set = int((time_set - now_time).total_seconds())
        # 输入的时间 - 当前时间 转换为秒

        if time_set <= 0:
            # 如果小于零 就是选择到了之前的时间
            self.label_time.setText(str(-time_set) + '秒前' + '(不可用)')
            # 打出 不可用 的标签
            self.QRZX.setEnabled(False)
            # 顺便把确认按钮设置为不可用
            return False
            # 再返回个 False 做判断
        elif time_set > 0:
            # 如果大于零 就是未来的时间
            self.label_time.setText(str(time_set) + '秒后')
            # 把时间输出到标签
            self.QRZX.setEnabled(True)
            # 把确认按钮设置为可用
            return time_set
            # 返回世纪描述

    def ok(self):
        time_set = self.time_calculation()
        # 获取当前时间与输入时间的差
        if time_set == False:
            # 如果为 False 则是过去的时间
            self.label_time.setText('错误:这是个过去的时间')
            # 把错误输出到标签
        else:
            # 其余就是正常的未来时间
            cmd_f = open('_.bat', 'w')
            # 打开（写入） _.bat 文件 用来执行命令
            if self.GuanJi_AN.isChecked():
                # 如果选择了关机
                cmd_f.write(f'shutdown -s -t {time_set}')
                # 在 _.bat 写入 关机命令
            if self.ChongQi_AN.isChecked():
                # 如果是重启
                cmd_f.write(f'shutdown -s -r {time_set}')
                # 在 _.bat 写入 重启命令

            cmd_f.close()
            # 保存 _.bat
            os.startfile('_.bat')
            # 使用系统默认程序运行 _.bat
            QtWidgets.QMessageBox.information(None, '输出', '已经通过系统默认程序运行')
            # 输出一条信息,以供确认
            os.remove('_.bat')
            # 删除 _.bat 文件

    def cleam(self):
        cmd_f = open('_.bat', 'w')
        # 打开(写入) _.bat
        cmd_f.write('shutdown -a')
        # 写入 取消命令
        cmd_f.close()
        # 保存 _.bat
        os.startfile('_.bat')
        # 使用系统默认程序运行 _.bat
        QtWidgets.QMessageBox.information(None, '输出', '已经取消当前有的定时关闭任务')
        # 输出一条信息,以供确认
        os.remove('_.bat')
        # 删除 _.bat 文件

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "定时关机"))
        self.pushButton.setText(_translate("MainWindow", "关于"))
        self.groupBox.setTitle(_translate("MainWindow", "设置时间"))
        self.label_time.setText(_translate("MainWindow", "- 秒后"))
        self.time.setDisplayFormat(_translate(
            "MainWindow", "yyyy-M-d H:mm:ss"))
        self.groupBox_2.setTitle(_translate("MainWindow", "做"))
        self.GuanJi_AN.setText(_translate("MainWindow", "关机"))
        self.ChongQi_AN.setText(_translate("MainWindow", "重启"))
        self.groupBox_4.setTitle(_translate("MainWindow", "确认执行框"))
        self.QRZX.setText(_translate("MainWindow", "确认执行"))
        self.QRZX.setEnabled(False)
        self.QXDQ.setText(_translate("MainWindow", "取消当前"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
